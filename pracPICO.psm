                    ; KCPSM3 Program - Practice Picoblaze on Spartan-3A Starter Kit.
                    ;
                    ;
                    ;
                    ;
                    ; The 8 LEDs provide a simple 'heart beat' counter driven by interrupts generated at
                    ; one second intervals.
                    ;
                    ;
                    ;**************************************************************************************
                    ; Port definitions
                    ;**************************************************************************************
                    ;
                    ;
                    ;
                    CONSTANT LED_port_volume, 80        ;8 simple LEDs. Is an OUTPUT port.
					CONSTANT LED_port_blinker, 40       ; Blinking LED 
			        CONSTANT DATA_IN_PORT, 00	        ;input data port. this is an INPUT port.

              
                    ;**************************************************************************************
                    ; Special Register usage
                    ;**************************************************************************************
                    ;
                    ; No registers are given special names in this program.
                    ;
                    ;**************************************************************************************
                    ; Scratch Pad Memory Locations
                    ;**************************************************************************************
                    ;
                    ;
                    CONSTANT ISR_preserve_s0, 00        ;Preserve s0 contents during ISR
                    CONSTANT ISR_preserve_s1, 01        ;Preserve s1 contents during ISR
                    CONSTANT ISR_preserve_s2, 02        ;Preserve s2 contents during ISR
                    CONSTANT ISR_preserve_s3, 03        ;Preserve s3 contents during ISR
					
					
                    ;
                    CONSTANT counter, 04           ;remember count value 
					CONSTANT lower_sum, 05          ;remember lower bits of the sum value 
					CONSTANT upper_sum, 06             ;remember upper bits of the sum 
                   
                    ;
                    ;**************************************************************************************
                    ; Useful data constants
                    ;**************************************************************************************
                    ;
                    ;
                    ; Constant to define a software delay of 1us. This must be adjusted to reflect the
                    ; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
                    ; calculation highly predictable. The '6' in the following equation even allows for
                    ; 'CALL delay_1us' instruction in the initiating code.
                    ;
                    ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                    ;
                    ; Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
                    ; For clock rates below 10MHz the value of 1 must be used and the operation will
                    ; become lower than intended. Interrupts may effect the timing of software based
                    ; delays.
                    ;
                    CONSTANT delay_1us_constant, 05
                    ;
                    ;
                    ;
                   
                    ;
                    ;
                    ;
                    ;
                    ;
                    ;**************************************************************************************
                    ; Initialise the system
                    ;**************************************************************************************
                    ;
        cold_start: LOAD s0, 00                         ;clear 1 second counter and clear LEDs
                    STORE s0, counter 
					STORE s0, lower_sum
					STORE s0, upper_sum
                    OUTPUT s0, LED_port_blinker 
					OUTPUT s0, LED_port_volume 
                    ;
                    ENABLE INTERRUPT                    ;enable one second heart beat
                    ;
                    ;**************************************************************************************
                    ; Main program
                    ;**************************************************************************************
                    ;
                    ; Blink LED 0 at a rate of 1 Hz 
                    ;
      main_program: LOAD s0, 01    ;Turn on LEDR0                         Temporarily removed, debugging ISR 
					OUTPUT s0, LED_port_blinker  
					CALL delay_1s
					LOAD s0, 00    ;Turn off LEDR0 
					OUTPUT s0, LED_port_blinker  
					CALL delay_1s 
					 
					JUMP main_program 
       		  
                
                    ;**************************************************************************************
                    ; Software delay routines
                    ;**************************************************************************************
                    ;
                    ; Delay of 1us.
                    ;
                    ; Constant value 'delay_1us_constant' reflects the clock applied to KCPSM3. Every
                    ; instruction executes in 2 clock cycles making the calculation highly predictable.
                    ; The '6' in the following equation allows for the 'CALL delay_1us' instruction used
                    ; in the initiating code. Interrupts may effect software derived delays.
                    ;
                    ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                    ;
                    ; Registers used s0
                    ;
         delay_1us: LOAD s0, delay_1us_constant
          wait_1us: SUB s0, 01
                    JUMP NZ, wait_1us
                    RETURN
                    ;
                    ; Delay of 40us.
                    ;
                    ; Registers used s0, s1
                    ;
        delay_40us: LOAD s1, 28                         ;40 x 1us = 40us
         wait_40us: CALL delay_1us
                    SUB s1, 01
                    JUMP NZ, wait_40us
                    RETURN
                    ;
                    ;
                    ; Delay of 1ms.
                    ;
                    ; Registers used s0, s1, s2
                    ;
         delay_1ms: LOAD s2, 19                         ;25 x 40us = 1ms
          wait_1ms: CALL delay_40us
                    SUB s2, 01
                    JUMP NZ, wait_1ms
                    RETURN
                    ;
                    ; Delay of 20ms.
                    ;
                    ; Delay of 20ms used during initialisation.
                    ;
                    ; Registers used s0, s1, s2, s3
                    ;
        delay_20ms: LOAD s3, 14                         ;20 x 1ms = 20ms
         wait_20ms: CALL delay_1ms
                    SUB s3, 01
                    JUMP NZ, wait_20ms
                    RETURN
                    ;
                    ; Delay of approximately 1 second.
                    ;
                    ; Registers used s0, s1, s2, s3, s4
                    ;
          delay_1s: LOAD s4, 32                         ;50 x 20ms = 1000ms
           wait_1s: CALL delay_20ms
                    SUB s4, 01
                    JUMP NZ, wait_1s
                    RETURN
                    ;
                    ;
                    ;
         
                    ;**************************************************************************************
                    ; Interrupt Service Routine (ISR)
                    ;**************************************************************************************
                    ;
                    ; 
                    ;
               ISR: STORE s0, ISR_preserve_s0           ;preserve register
					STORE s1, ISR_preserve_s1			;preserve register 
					STORE s2, ISR_preserve_s2           ;preserve register 
					STORE s3, ISR_preserve_s3           ;preserve register 
					
					
					FETCH s0, counter 					;read count value 
					FETCH s1, lower_sum 				;read sum 
					FETCH s2, upper_sum 				;read sum 
					
					COMPARE s0, FF 						;check if counter is full 
					JUMP Z, Average 
					
					INPUT s3, DATA_IN_PORT 				;read audio value 
					ADD s1, s3 							;Add to sum
					JUMP NC, increment_counter
					ADDCY s2, 00 						;Count number of times 256 has passed 
 
 increment_counter: ADD s0, 01 							;increment counter 
					JUMP end_interrupt 
					
          Average:  ADD s2, s1                         ;(256*carry + s1)/256   
				    							
		LED_prep:	LOAD s0, 00 						 ;reset counter
		
					
	Display_LED:    OUTPUT s2, LED_port_volume           ;output volume to LEDs 
					LOAD s2, 00							 ;reset upper sum  
					LOAD s1, 00 						 ;reset lower sum 
				   
    end_interrupt:  STORE s2, upper_sum                  ;store values to proper locations  
				    STORE s1, lower_sum 
				    STORE s0, counter 
				    FETCH s0, ISR_preserve_s0 			;Restore registers 
				    FETCH s1, ISR_preserve_s1 
				    FETCH s2, ISR_preserve_s2 
				    FETCH s3, ISR_preserve_s3 
					
				    RETURNI ENABLE 
					
                    ;**************************************************************************************
                    ; Interrupt Vector
                    ;**************************************************************************************
                    ;
                    ADDRESS 3FF
                    JUMP ISR
                    ;
                    ;
					
					;		    COMPARE s2, 1F                       ;Compare with 00011111
		;		    JUMP C, Check_15					 ;Jump if smaller 
		;			JUMP Z, load_31                      ;Jump if equal 
		;		    LOAD s2, 3F 						 ;s2 gets 00111111 
		;			JUMP Display_LED 
					
		; Check_15: COMPARE s2, 0F                        ;Compare with 00001111 
		;		   JUMP C, Check_7 
		;		   JUMP Z, load_15  
	    ;  load_31: LOAD s2, 1F 
		;		   JUMP Display_LED 
				   
		; Check_7:  COMPARE s2, 07						;compare with 00000111 
		;		   JUMP C, Check_3 
		;		   JUMP Z, load_7 
	    ; load_15:  LOAD s2, 0F 
		;		   JUMP Display_LED 
				   
		; Check_3:  COMPARE s2, 03                       ;compare with 00000011
		;		   JUMP C, Check_1 
		;		   JUMP Z, load_3 
		;  load_7:  LOAD s2, 07 
		;		   JUMP Display_LED
				   
		; Check_1: Compare s2, 01 						;compare with 00000001
		;		  JUMP Z, equal_1 
		;  load_3: LOAD s2, 03 
		;          JUMP Display_LED 
				  
		; equal_1: LOAD s2, 01 		
